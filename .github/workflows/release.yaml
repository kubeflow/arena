name: Release

on:
  push:
    branches:
      - master
    paths:
      - VERSION

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_REPOSITORY: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  package-arena-installer:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        os:
          - linux
          - darwin
        arch:
          - amd64
          - arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}

      - name: Get git commit id
        run: |
          COMMIT=$(git rev-parse --short HEAD)
          echo "COMMIT=${COMMIT}" >>${GITHUB_ENV}

      - name: Build arena installer tarball
        run: |
          make arena-installer OS=${{ matrix.os }} ARCH=${{ matrix.arch }}

      - uses: actions/upload-artifact@v4
        with:
          name: arena-installer-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: arena-installer-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          if-no-files-found: error
          overwrite: true

  build-arena-image:
    name: Build Arena container image

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  release-image:
    needs:
      - build-arena-image

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${{ steps.meta.outputs.version }}

  push_tag:
    needs:
      - package-arena-installer
      - release-image

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}

      - name: Create and push tag
        run: |
          TAG="v${VERSION}"
          git tag -a ${TAG} -m "Release v${VERSION}"
          git push origin ${TAG}

  draft_release:
    needs:
      - push_tag

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> ${GITHUB_ENV}

      - name: Download arena installer tarballs
        uses: actions/download-artifact@v4
        with:
          pattern: arena-installer-${{ env.VERSION }}-{linux,darwin}-{amd64,arm64}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.VERSION }}
          prerelease: ${{ contains(env.VERSION, 'rc') }}
          target_commitish: ${{ github.sha }}
          draft: true
          files: |
            arena-installer-*/arena-installer-*.tar.gz
          fail_on_unmatched_files: true
