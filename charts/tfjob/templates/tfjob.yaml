{{- $gpuCount := .Values.gpuCount -}}
{{- $psGpuCount := .Values.psGPU -}}
{{- $syncMode := .Values.syncMode -}}
{{- $cleanPodPolicy := .Values.cleanPodPolicy -}}
{{- $dataDirs := .Values.dataDirs -}}
{{- $tfNodeSelectors :=.Values.tfNodeSelectors -}}
apiVersion: "kubeflow.org/v1"
kind: "TFJob"
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "tfjob.name" . }}
    chart: {{ template "tfjob.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    createdBy: "TFJob"
  {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  annotations:
  {{- range $key, $value := .Values.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
{{- if .Values.cleanPodPolicy }}
  runPolicy:
{{- if eq "None" $cleanPodPolicy }}
    cleanPodPolicy: None
{{- end }}
{{- if eq "Running" $cleanPodPolicy }}
    cleanPodPolicy: Running
{{- end }}
{{- end }}
  tfReplicaSpecs:
{{- if .Values.ps }}
    PS:
      replicas: {{ .Values.ps }}
      restartPolicy: Never
      template:
        metadata:
          labels:
            app: {{ template "tfjob.name" . }}
            chart: {{ template "tfjob.chart" . }}
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            createdBy: "TFJob"
          {{- if .Values.podGroupName }}
            pod-group.scheduling.sigs.k8s.io/name: {{ .Values.podGroupName }}
            pod-group.scheduling.sigs.k8s.io/min-available: "{{ .Values.podGroupMinAvailable }}"
          {{- end }}
          {{- range $key, $value := .Values.labels }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}  
          annotations:
          {{- range $key, $value := .Values.annotations }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
        spec:
          {{- if ne (len $tfNodeSelectors.PS) 0 }}
          nodeSelector:
          {{- range $nodeKey,$nodeVal := $tfNodeSelectors.PS }}
            {{ $nodeKey }}: "{{ $nodeVal }}"
          {{- end }}
          {{- end }}
          {{- if ne (len .Values.tolerations) 0 }}
          tolerations:
          {{- range $tolerationKey := .Values.tolerations }}
          - {{- if $tolerationKey.key }}
            key: "{{ $tolerationKey.key }}"
            {{- end }}
            {{- if $tolerationKey.value }}
            value: "{{ $tolerationKey.value }}"
            {{- end }}
            {{- if $tolerationKey.effect }}
            effect: "{{ $tolerationKey.effect }}"
            {{- end }}
            {{- if $tolerationKey.operator }}
            operator: "{{ $tolerationKey.operator }}"
            {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.priorityClassName }}
          priorityClassName: {{ .Values.priorityClassName }}
          {{- end }}
          {{- if .Values.schedulerName }}
          schedulerName: {{ .Values.schedulerName }}
          {{- else if .Values.ps }}
          {{- if .Values.hasGangScheduler }}
          {{- if .Values.enableGangScheduler }}
          schedulerName: {{ .Values.gangSchedulerName }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.binpack }}
          affinity:
            podAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: release
                        operator: In
                        values:
                          - "{{ .Release.Name }}"
                      - key: group-name
                        operator: In
                        values:
                          - "kubeflow.org"
              - weight: 60
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: tf-replica-type
                        operator: In
                        values:
                          - worker
              - weight: 30
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: tf-replica-type
                        operator: In
                        values:
                          - ps      
          {{- end }}
          {{- if .Values.useHostNetwork }}
          {{- if not .Values.useENI }}
          hostNetwork: {{ .Values.useHostNetwork }}
          dnsPolicy: ClusterFirstWithHostNet
          {{- end }}
          {{- end }}
          {{- if .Values.useHostPID }}
          hostPID: {{ .Values.useHostPID }}
          {{- end }}
          {{- if .Values.useHostIPC }}
          hostIPC: {{ .Values.useHostIPC }}
          {{- end }}
          {{- if .Values.enablePodSecurityContext }}
          {{- if .Values.isNonRoot}}
          securityContext:
            runAsUser: {{ .Values.podSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.podSecurityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.podSecurityContext.runAsNonRoot }}
            supplementalGroups:
              {{- range $group := .Values.podSecurityContext.supplementalGroups }}
              - {{ $group -}}
              {{ end }}
          {{- end }}
          {{- end }}
          volumes:
            {{- if ne (len .Values.configFiles) 0 }}
            {{- $releaseName := .Release.Name }}
            {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
            - name: {{ $containerPathKey }}
              configMap:
                name: {{ $releaseName }}-{{ $containerPathKey }}
            {{- end }}
            {{- end }}
            {{- if .Values.syncMode }}
            - name: code-sync
              emptyDir: {}
            {{- end}}
            {{- if .Values.nvidiaPath }}
            - hostPath:
                path: "{{ .Values.nvidiaPath }}"
              name: nvidia
            {{- end }}
            {{- if .Values.dataset }}   
            {{- range $pvcName, $destPath := .Values.dataset }}
            - name: "{{ $pvcName }}"
              persistentVolumeClaim:
                claimName: "{{ $pvcName }}"
            {{- end }}
            {{- end }}
            {{- if $dataDirs }}
            {{- range $dataDirs }}
            - hostPath:
                path: {{ .hostPath }}
              name: {{ .name }}
            {{- end }}
            {{- end }}
          {{- if .Values.syncMode }}
          initContainers:
          - name: init-code
            {{- if .Values.syncImage }}
            image: "{{ .Values.syncImage }}"
            {{- else }}
            {{- if eq .Values.syncMode "rsync" }}
            image: "{{ .Values.rsyncImage }}"
            {{- end }}
            {{- if eq .Values.syncMode "git" }}
            image: "{{ .Values.gitImage }}"
            {{- end }}
            {{- end }}
            imagePullPolicy: {{ .Values.imagePullPolicy }}
            {{- if eq "rsync" $syncMode }}
            command: ["rsync", "-avP", "{{ .Values.syncSource}}", "/code"]
            {{- end }}
            resources:
              requests:
                {{- if .Values.psCPU }}
                cpu: {{ .Values.psCPU | quote }}
                {{- end}}
                {{- if .Values.psMemory }}
                memory: {{ .Values.psMemory | quote }}
                {{- end}}
              limits:
                {{- if .Values.psCPU }}
                cpu: {{ .Values.psCPU | quote }}
                {{- end}}
                {{- if .Values.psMemory }}
                memory: {{ .Values.psMemory | quote }}
                {{- end}}
            env:
            {{- range $key, $value := .Values.envs }}
              - name: "{{ $key }}"
                value: "{{ $value }}"
            {{- end }}
            {{- if eq "git" $syncMode }}
              - name: GIT_SYNC_REPO
                value: {{ .Values.syncSource}}
              - name: GIT_SYNC_DEST
                value: {{ .Values.syncGitProjectName}}
              - name: GIT_SYNC_ROOT
                value: /code
              - name: GIT_SYNC_ONE_TIME
                value: "true"
            {{- end }}
            volumeMounts:
              - name: code-sync
                mountPath: /code
          {{- end}}
          {{- if ne (len .Values.imagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $imagePullSecret := .Values.imagePullSecrets }}
            - name: "{{ $imagePullSecret }}"
          {{- end }}
          {{- end }}
          containers:
            - name: tensorflow
              image: {{ .Values.psImage }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              {{- if .Values.workingDir }}
              workingDir: {{ .Values.workingDir }}
              {{- end }}
              {{- if .Values.privileged }}
              securityContext:
                privileged: true
              {{- else if .Values.enableRDMA }}
              securityContext:
                capabilities:
                  add:
                  - IPC_LOCK
              {{- end }}
              resources:             
                requests:
                  {{- if gt (int $psGpuCount) 0}}
                  nvidia.com/gpu: {{ .Values.psGPU | quote }}
                  {{- end }}
                  {{- if .Values.psCPU }}
                  cpu: {{ .Values.psCPU | quote }}
                  {{- end}}
                  {{- if .Values.psMemory }}
                  memory: {{ .Values.psMemory | quote }}
                  {{- end}}
                  {{- if .Values.enableRDMA }}
                  rdma/hca: "1"
                  {{- end}}
                limits:
                  {{- if gt (int $psGpuCount) 0}}
                  nvidia.com/gpu: {{ .Values.psGPU | quote }}
                  {{- end }}
                  {{- if .Values.psCPULimit }}
                  cpu: {{ .Values.psCPULimit | quote }}
                  {{- else if .Values.psCPU }}
                  cpu: {{ .Values.psCPU | quote }}
                  {{- end}}
                  {{- if .Values.psMemoryLimit }}
                  memory: {{ .Values.psMemoryLimit | quote }}                  
                  {{- else if .Values.psMemory }}
                  memory: {{ .Values.psMemory | quote }}
                  {{- end}}
                  {{- if .Values.enableRDMA }}
                  rdma/hca: "1"
                  {{- end}}
              {{- if .Values.psPort }}
              ports:
                - containerPort: {{ .Values.psPort }}
                  name: tfjob-port
              {{- end}}
              command:
                - "{{ .Values.shell }}"
                - "-c"
                - {{ .Values.command }}
              env:
              {{- if eq (int $psGpuCount) 0}}
                - name: NVIDIA_VISIBLE_DEVICES
                  value: "void"
              {{- end }}        
              {{- range $key, $value := .Values.envs }}
              {{- if ne "NVIDIA_VISIBLE_DEVICES" $key }}
                - name: "{{ $key }}"
                  value: "{{ $value }}"
              {{- end }}
              {{- end }}
              volumeMounts:
                {{- if ne (len .Values.configFiles) 0 }}
                {{- $releaseName := .Release.Name }}
                {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
                {{- $visit := "false" }}
                {{- range $cofigFileKey,$configFileInfo := $configFileInfos }}
                {{- if eq  "false" $visit }}
                - mountPath: {{ $configFileInfo.containerFilePath }}
                  name: {{ $containerPathKey }}
                {{- $visit = "true" }}  
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
                {{- if .Values.syncMode }}
                {{- if .Values.workingDir }}
                - name: code-sync
                  mountPath: {{ .Values.workingDir }}/code
                {{- else }}
                - name: code-sync
                  mountPath: /code
                {{- end}}
                {{- end}}
                {{- if .Values.dataset }}   
                {{- range $pvcName, $destPath := .Values.dataset }}
                - name: "{{ $pvcName }}"
                  mountPath: "{{ $destPath }}"
                {{- end }}
                {{- end }}
                {{- if $dataDirs }}
                {{- range $dataDirs }}
                - mountPath: {{ .containerPath }}
                  name: {{ .name }}
                {{- end }}
                {{- end }}
{{- end }}
{{- if .Values.workers }}
    Worker:
      replicas: {{ .Values.workers }}
      {{- if .Values.chief }}
      restartPolicy: OnFailure
      {{- else }}
      restartPolicy: Never
      {{- end }}
      template:
        metadata:
          labels:
            app: {{ template "tfjob.name" . }}
            chart: {{ template "tfjob.chart" . }}
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            createdBy: "TFJob"
          {{- if .Values.podGroupName }}
            pod-group.scheduling.sigs.k8s.io/name: {{ .Values.podGroupName }}
            pod-group.scheduling.sigs.k8s.io/min-available: "{{ .Values.podGroupMinAvailable }}"
          {{- end }}
          {{- range $key, $value := .Values.labels }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
          annotations:
          {{- range $key, $value := .Values.annotations }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
        spec:
          {{- if ne (len $tfNodeSelectors.Worker) 0 }}
          nodeSelector:
          {{- range $nodeKey,$nodeVal := $tfNodeSelectors.Worker }}
            {{ $nodeKey }}: "{{ $nodeVal }}"
          {{- end }}
          {{- end }}
          {{- if ne (len .Values.tolerations) 0 }}
          tolerations:
          {{- range $tolerationKey := .Values.tolerations }}
          - {{- if $tolerationKey.key }}
            key: "{{ $tolerationKey.key }}"
            {{- end }}
            {{- if $tolerationKey.value }}
            value: "{{ $tolerationKey.value }}"
            {{- end }}
            {{- if $tolerationKey.effect }}
            effect: "{{ $tolerationKey.effect }}"
            {{- end }}
            {{- if $tolerationKey.operator }}
            operator: "{{ $tolerationKey.operator }}"
            {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.priorityClassName }}
          priorityClassName: {{ .Values.priorityClassName }}
          {{- end }}
          {{- if .Values.schedulerName }}
          schedulerName: {{ .Values.schedulerName }}
          {{- else if .Values.ps }}
          {{- if .Values.hasGangScheduler }}
          {{- if .Values.enableGangScheduler }}
          schedulerName: {{ .Values.gangSchedulerName }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.ps }}
          {{- if .Values.binpack }}
          affinity:
            podAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: release
                        operator: In
                        values:
                          - "{{ .Release.Name }}"
                      - key: group-name
                        operator: In
                        values:
                          - "kubeflow.org"
              - weight: 60
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: tf-replica-type
                        operator: In
                        values:
                          - ps
              - weight: 30
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: tf-replica-type
                        operator: In
                        values:
                          - worker      
          {{- end }}
          {{- end }}
          {{- if .Values.useHostNetwork }}
          {{- if not .Values.useENI }}
          hostNetwork: {{ .Values.useHostNetwork }}
          dnsPolicy: ClusterFirstWithHostNet
          {{- end }}
          {{- end }}
          {{- if .Values.useHostPID }}
          hostPID: {{ .Values.useHostPID }}
          {{- end }}
          {{- if .Values.useHostIPC }}
          hostIPC: {{ .Values.useHostIPC }}
          {{- end }}
          {{- if .Values.enablePodSecurityContext }}
          {{- if .Values.isNonRoot}}
          securityContext:
            runAsUser: {{ .Values.podSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.podSecurityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.podSecurityContext.runAsNonRoot }}
            supplementalGroups:
              {{- range $group := .Values.podSecurityContext.supplementalGroups }}
              - {{ $group -}}
              {{ end }}
          {{- end }}
          {{- end }}
          volumes:
            {{- if ne (len .Values.configFiles) 0 }}
            {{- $releaseName := .Release.Name }}
            {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
            - name: {{ $containerPathKey }}
              configMap:
                name: {{ $releaseName }}-{{ $containerPathKey }}
            {{- end }}
            {{- end }}
            {{- if .Values.useTensorboard }}
            {{- if .Values.isLocalLogging }}
            - hostPath:
                path: "{{ .Values.hostLogPath }}"
              name: training-logs-volume
            {{- end}}
            {{- end}}
            {{- if .Values.syncMode }}
            - name: code-sync
              emptyDir: {}
            {{- end}}
            {{- if gt (int $gpuCount) 0}}  
            {{- if .Values.nvidiaPath }}
            - hostPath:
                path: "{{ .Values.nvidiaPath }}"
              name: nvidia
            {{- end }}
            {{- end }}
            {{- if .Values.dataset }}   
            {{- range $pvcName, $destPath := .Values.dataset }}
            - name: "{{ $pvcName }}"
              persistentVolumeClaim:
                claimName: "{{ $pvcName }}"
            {{- end }}
            {{- end }}
            {{- if $dataDirs }}
            {{- range $dataDirs }}
            - hostPath:
                path: {{ .hostPath }}
              name: {{ .name }}
            {{- end }}
            {{- end }}
          {{- if .Values.syncMode }}
          initContainers:
          - name: init-code
            {{- if .Values.syncImage }}
            image: "{{ .Values.syncImage }}"
            {{- else }}
            {{- if eq .Values.syncMode "rsync" }}
            image: "{{ .Values.rsyncImage }}"
            {{- end }}
            {{- if eq .Values.syncMode "git" }}
            image: "{{ .Values.gitImage }}"
            {{- end }}
            {{- end }}
            imagePullPolicy: {{ .Values.imagePullPolicy }}
            {{- if eq "rsync" $syncMode }}
            command: ["rsync", "-avP", "{{ .Values.syncSource}}", "/code"]
            {{- end }}
            resources:
              requests:
                  {{- if .Values.workerCPU }}
                  cpu: {{ .Values.workerCPU | quote }}
                  {{- end}}
                  {{- if .Values.workerMemory }}
                  memory: {{ .Values.workerMemory | quote }}
                  {{- end}}
              limits:
                  {{- if .Values.workerCPULimit }}
                  cpu: {{ .Values.workerCPULimit | quote }}
                  {{- else if .Values.workerCPU }}
                  cpu: {{ .Values.workerCPU | quote }}
                  {{- end}}
                  {{- if .Values.workerMemoryLimit }}
                  memory: {{ .Values.workerMemoryLimit | quote }}                  
                  {{- else if .Values.workerMemory }}
                  memory: {{ .Values.workerMemory | quote }}
                  {{- end}}
            env:
            {{- range $key, $value := .Values.envs }}
              - name: "{{ $key }}"
                value: "{{ $value }}"
            {{- end }}
            {{- if eq "git" $syncMode }}
              - name: GIT_SYNC_REPO
                value: {{ .Values.syncSource}}
              - name: GIT_SYNC_DEST
                value: {{ .Values.syncGitProjectName}}
              - name: GIT_SYNC_ROOT
                value: /code
              - name: GIT_SYNC_ONE_TIME
                value: "true"
            {{- end }}
            volumeMounts:
              - name: code-sync
                mountPath: /code
          {{- end}}
          {{- if ne (len .Values.imagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $imagePullSecret := .Values.imagePullSecrets }}
            - name: "{{ $imagePullSecret }}"
          {{- end }}
          {{- end }}
          containers:
            - name: tensorflow
              image: {{ .Values.workerImage }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              {{- if .Values.workingDir }}
              workingDir: {{ .Values.workingDir }}
              {{- end }}
              {{- if .Values.privileged }}
              securityContext:
                privileged: true
              {{- else if .Values.enableRDMA }}
              securityContext:
                capabilities:
                  add:
                  - IPC_LOCK
              {{- end }}
              resources:             
                requests:
                  {{- if gt (int $gpuCount) 0}}   
                  {{- if .Values.nvidiaPath }}
                  alpha.kubernetes.io/nvidia-gpu: {{ $gpuCount | quote }}
                  {{- else}}
                  nvidia.com/gpu: {{ $gpuCount | quote }}
                  {{- end}}
                  {{- end}}
                  {{- if .Values.workerCPU }}
                  cpu: {{ .Values.workerCPU | quote }}
                  {{- end}}
                  {{- if .Values.workerMemory }}
                  memory: {{ .Values.workerMemory | quote }}
                  {{- end}}
                  {{- if .Values.enableRDMA }}
                  rdma/hca: "1"
                  {{- end}}
                limits:
                  {{- if gt (int $gpuCount) 0}}   
                  {{- if .Values.nvidiaPath }}
                  alpha.kubernetes.io/nvidia-gpu: {{ $gpuCount | quote }}
                  {{- else}}
                  nvidia.com/gpu: {{ $gpuCount | quote }}
                  {{- end}}
                  {{- end}}
                  {{- if .Values.workerCPULimit }}
                  cpu: {{ .Values.workerCPULimit | quote }}                  
                  {{- else if .Values.workerCPU }}
                  cpu: {{ .Values.workerCPU | quote }}
                  {{- end}}
                  {{- if .Values.workerMemoryLimit }}
                  memory: {{ .Values.workerMemoryLimit | quote }}                  
                  {{- else if .Values.workerMemory }}
                  memory: {{ .Values.workerMemory | quote }}
                  {{- end}}
                  {{- if .Values.enableRDMA }}
                  rdma/hca: "1"
                  {{- end}}
              {{- if .Values.workerPort }}
              ports:
                - containerPort: {{ .Values.workerPort }}
                  name: tfjob-port
              {{- end}}
              command:
                - "{{ .Values.shell }}"
                - "-c"
                - {{ .Values.command }}
              env:        
              {{- range $key, $value := .Values.envs }}
                - name: "{{ $key }}"
                  value: "{{ $value }}"
              {{- end }}
              volumeMounts:
                {{- if ne (len .Values.configFiles) 0 }}
                {{- $releaseName := .Release.Name }}
                {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
                {{- $visit := "false" }}
                {{- range $cofigFileKey,$configFileInfo := $configFileInfos }}
                {{- if eq  "false" $visit }}
                - mountPath: {{ $configFileInfo.containerFilePath }}
                  name: {{ $containerPathKey }}
                {{- $visit = "true" }}  
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
                {{- if (not .Values.chief) }}
                {{- if .Values.useTensorboard }}
                {{- if .Values.isLocalLogging }}
                - mountPath: {{ .Values.trainingLogdir }}
                  name: training-logs-volume
                {{- end}}
                {{- end}}
                {{- end}}
                {{- if .Values.syncMode }}
                {{- if .Values.workingDir }}
                - name: code-sync
                  mountPath: {{ .Values.workingDir }}/code
                {{- else }}
                - name: code-sync
                  mountPath: /code
                {{- end}}
                {{- end}}
                {{- if .Values.dataset }}   
                {{- range $pvcName, $destPath := .Values.dataset }}
                - name: "{{ $pvcName }}"
                  mountPath: "{{ $destPath }}"
                {{- end }}
                {{- end }}
                {{- if gt (int $gpuCount) 0}}  
                {{- if .Values.nvidiaPath }}
                - mountPath: /usr/local/nvidia
                  name: nvidia
                {{- end }}
                {{- end }}
                {{- if $dataDirs }}
                {{- range $dataDirs }}
                - mountPath: {{ .containerPath }}
                  name: {{ .name }}
                {{- end }}
                {{- end }}

{{- end }}
{{- if .Values.chief }}
{{ .Values.chiefName | indent  4}}:
      restartPolicy: Never
      replicas: 1
      template:
        metadata:
          labels:
            app: {{ template "tfjob.name" . }}
            chart: {{ template "tfjob.chart" . }}
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            createdBy: "TFJob"
          {{- if .Values.podGroupName }}
            pod-group.scheduling.sigs.k8s.io/name: {{ .Values.podGroupName }}
            pod-group.scheduling.sigs.k8s.io/min-available: "{{ .Values.podGroupMinAvailable }}"
          {{- end }}
          {{- range $key, $value := .Values.labels }}
            {{ $key }}: {{ $value | quote }}
          {{- end }} 
          annotations:
          {{- range $key, $value := .Values.annotations }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
        spec:
          {{- if ne (len $tfNodeSelectors.Chief) 0 }}
          nodeSelector:
          {{- range $nodeKey,$nodeVal := $tfNodeSelectors.Chief }}
            {{ $nodeKey }}: "{{ $nodeVal }}"
          {{- end }}
          {{- end }}
          {{- if ne (len .Values.tolerations) 0 }}
          tolerations:
          {{- range $tolerationKey := .Values.tolerations }}
          - {{- if $tolerationKey.key }}
            key: "{{ $tolerationKey.key }}"
            {{- end }}
            {{- if $tolerationKey.value }}
            value: "{{ $tolerationKey.value }}"
            {{- end }}
            {{- if $tolerationKey.effect }}
            effect: "{{ $tolerationKey.effect }}"
            {{- end }}
            {{- if $tolerationKey.operator }}
            operator: "{{ $tolerationKey.operator }}"
            {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.priorityClassName }}
          priorityClassName: {{ .Values.priorityClassName }}
          {{- end }}
          {{- if .Values.schedulerName }}
          schedulerName: {{ .Values.schedulerName }}
          {{- else if .Values.ps }}
          {{- if .Values.hasGangScheduler }}
          {{- if .Values.enableGangScheduler }}
          schedulerName: {{ .Values.gangSchedulerName }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.ps }}
          {{- if .Values.binpack }}
          affinity:
            podAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: release
                        operator: In
                        values:
                          - "{{ .Release.Name }}"
                      - key: group-name
                        operator: In
                        values:
                          - "kubeflow.org"
              - weight: 60
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: tf-replica-type
                        operator: In
                        values:
                          - ps
              - weight: 30
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: tf-replica-type
                        operator: In
                        values:
                          - worker      
          {{- end }}
          {{- end }}
          {{- if .Values.useHostNetwork }}
          {{- if not .Values.useENI }}
          hostNetwork: {{ .Values.useHostNetwork }}
          dnsPolicy: ClusterFirstWithHostNet
          {{- end }}
          {{- end }}
          {{- if .Values.useHostPID }}
          hostPID: {{ .Values.useHostPID }}
          {{- end }}
          {{- if .Values.useHostIPC }}
          hostIPC: {{ .Values.useHostIPC }}
          {{- end }}
          {{- if .Values.enablePodSecurityContext }}
          {{- if .Values.isNonRoot}}
          securityContext:
            runAsUser: {{ .Values.podSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.podSecurityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.podSecurityContext.runAsNonRoot }}
            supplementalGroups:
              {{- range $group := .Values.podSecurityContext.supplementalGroups }}
              - {{ $group -}}
              {{ end }}
          {{- end }}
          {{- end }}
          volumes:
            {{- if ne (len .Values.configFiles) 0 }}
            {{- $releaseName := .Release.Name }}
            {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
            - name: {{ $containerPathKey }}
              configMap:
                name: {{ $releaseName }}-{{ $containerPathKey }}
            {{- end }}
            {{- end }}
            {{- if .Values.useTensorboard }}
            {{- if .Values.isLocalLogging }}
            - hostPath:
                path: "{{ .Values.hostLogPath }}"
              name: training-logs-volume
            {{- end}}
            {{- end}}
            {{- if .Values.syncMode }}
            - name: code-sync
              emptyDir: {}
            {{- end}}
            {{- if gt (int $gpuCount) 0}}  
            {{- if .Values.nvidiaPath }}
            - hostPath:
                path: "{{ .Values.nvidiaPath }}"
              name: nvidia
            {{- end }}
            {{- end }}
            {{- if .Values.dataset }}   
            {{- range $pvcName, $destPath := .Values.dataset }}
            - name: "{{ $pvcName }}"
              persistentVolumeClaim:
                claimName: "{{ $pvcName }}"
            {{- end }}
            {{- end }}
            {{- if $dataDirs }}
            {{- range $dataDirs }}
            - hostPath:
                path: {{ .hostPath }}
              name: {{ .name }}
            {{- end }}
            {{- end }}
          {{- if .Values.syncMode }}
          initContainers:
          - name: init-code
            {{- if .Values.syncImage }}
            image: "{{ .Values.syncImage }}"
            {{- else }}
            {{- if eq .Values.syncMode "rsync" }}
            image: "{{ .Values.rsyncImage }}"
            {{- end }}
            {{- if eq .Values.syncMode "git" }}
            image: "{{ .Values.gitImage }}"
            {{- end }}
            {{- end }}
            imagePullPolicy: {{ .Values.imagePullPolicy }}
            {{- if eq "rsync" $syncMode }}
            command: ["rsync", "-avP", "{{ .Values.syncSource}}", "/code"]
            {{- end }}
            resources:
              requests:
                  {{- if .Values.chiefCPU }}
                  cpu: {{ .Values.chiefCPU | quote }}
                  {{- end}}
                  {{- if .Values.chiefMemory }}
                  memory: {{ .Values.chiefMemory | quote }}
                  {{- end}}
              limits:
                  {{- if .Values.chiefCPULimit }}
                  cpu: {{ .Values.chiefCPULimit | quote }}
                  {{- else if .Values.chiefCPU }}
                  cpu: {{ .Values.chiefCPU | quote }}
                  {{- end}}
                  {{- if .Values.chiefMemoryLimit }}
                  memory: {{ .Values.chiefMemoryLimit | quote }}                  
                  {{- else if .Values.chiefMemory }}
                  memory: {{ .Values.chiefMemory | quote }}
                  {{- end}}
            env:
            {{- range $key, $value := .Values.envs }}
              - name: "{{ $key }}"
                value: "{{ $value }}"
            {{- end }}
            {{- if eq "git" $syncMode }}
              - name: GIT_SYNC_REPO
                value: {{ .Values.syncSource}}
              - name: GIT_SYNC_DEST
                value: {{ .Values.syncGitProjectName}}
              - name: GIT_SYNC_ROOT
                value: /code
              - name: GIT_SYNC_ONE_TIME
                value: "true"
            {{- end }}
            volumeMounts:
              - name: code-sync
                mountPath: /code
          {{- end}}
          {{- if ne (len .Values.imagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $imagePullSecret := .Values.imagePullSecrets }}
            - name: "{{ $imagePullSecret }}"
          {{- end }}
          {{- end }}
          containers:
            - name: tensorflow
              image: {{ .Values.workerImage }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              {{- if .Values.workingDir }}
              workingDir: {{ .Values.workingDir }}
              {{- end }}
              {{- if .Values.privileged }}
              securityContext:
                privileged: true
              {{- else if .Values.enableRDMA }}
              securityContext:
                capabilities:
                  add:
                  - IPC_LOCK
              {{- end }}
              resources:             
                requests:
                  {{- if gt (int $gpuCount) 0}}   
                  {{- if .Values.nvidiaPath }}
                  alpha.kubernetes.io/nvidia-gpu: {{ $gpuCount | quote }}
                  {{- else}}
                  nvidia.com/gpu: {{ $gpuCount | quote }}
                  {{- end}}
                  {{- end}}
                  {{- if .Values.chiefCPU }}
                  cpu: {{ .Values.chiefCPU | quote }}
                  {{- end}}
                  {{- if .Values.chiefMemory }}
                  memory: {{ .Values.chiefMemory | quote }}
                  {{- end}}
                  {{- if .Values.enableRDMA }}
                  rdma/hca: "1"
                  {{- end}}
                limits:
                  {{- if gt (int $gpuCount) 0}}   
                  {{- if .Values.nvidiaPath }}
                  alpha.kubernetes.io/nvidia-gpu: {{ $gpuCount | quote }}
                  {{- else}}
                  nvidia.com/gpu: {{ $gpuCount | quote }}
                  {{- end}}
                  {{- end}}
                  {{- if .Values.chiefCPULimit }}
                  cpu: {{ .Values.chiefCPULimit | quote }}                  
                  {{- else if .Values.chiefCPU }}
                  cpu: {{ .Values.chiefCPU | quote }}
                  {{- end}}
                  {{- if .Values.chiefMemoryLimit }}
                  memory: {{ .Values.chiefMemoryLimit | quote }}                  
                  {{- else if .Values.chiefMemory }}
                  memory: {{ .Values.chiefMemory | quote }}
                  {{- end}}
                  {{- if .Values.enableRDMA }}
                  rdma/hca: "1"
                  {{- end}}
              {{- if .Values.chiefPort }}
              ports:
                - containerPort: {{ .Values.chiefPort }}
                  name: tfjob-port
              {{- end}}
              command:
                - "{{ .Values.shell }}"
                - "-c"
                - {{ .Values.command }}
              env:        
              {{- range $key, $value := .Values.envs }}
                - name: "{{ $key }}"
                  value: "{{ $value }}"
              {{- end }}
              volumeMounts:
                {{- if ne (len .Values.configFiles) 0 }}
                {{- $releaseName := .Release.Name }}
                {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
                {{- $visit := "false" }}
                {{- range $cofigFileKey,$configFileInfo := $configFileInfos }}
                {{- if eq  "false" $visit }}
                - mountPath: {{ $configFileInfo.containerFilePath }}
                  name: {{ $containerPathKey }}
                {{- $visit = "true" }}  
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
                {{- if .Values.useTensorboard }}
                {{- if .Values.isLocalLogging }}
                - mountPath: {{ .Values.trainingLogdir }}
                  name: training-logs-volume
                {{- end}}
                {{- end}}
                {{- if .Values.syncMode }}
                {{- if .Values.workingDir }}
                - name: code-sync
                  mountPath: {{ .Values.workingDir }}/code
                {{- else }}
                - name: code-sync
                  mountPath: /code
                {{- end}}
                {{- end}}
                {{- if .Values.dataset }}   
                {{- range $pvcName, $destPath := .Values.dataset }}
                - name: "{{ $pvcName }}"
                  mountPath: "{{ $destPath }}"
                {{- end }}
                {{- end }}
                {{- if gt (int $gpuCount) 0}}  
                {{- if .Values.nvidiaPath }}
                - mountPath: /usr/local/nvidia
                  name: nvidia
                {{- end }}
                {{- end }}
                {{- if $dataDirs }}
                {{- range $dataDirs }}
                - mountPath: {{ .containerPath }}
                  name: {{ .name }}
                {{- end }}
                {{- end }}
{{- end }}
{{- if .Values.evaluator }}
    Evaluator:
      restartPolicy: Never
      replicas: 1
      template:
        metadata:
          labels:
            app: {{ template "tfjob.name" . }}
            chart: {{ template "tfjob.chart" . }}
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            createdBy: "TFJob"
            {{- if .Values.podGroupName }}
            pod-group.scheduling.sigs.k8s.io/name: {{ .Values.podGroupName }}
            pod-group.scheduling.sigs.k8s.io/min-available: "{{ .Values.podGroupMinAvailable }}"
            {{- end }}
          {{- range $key, $value := .Values.labels }}
            {{ $key }}: {{ $value | quote }}
          {{- end }} 
          annotations:
          {{- range $key, $value := .Values.annotations }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
        spec:
          {{- if ne (len $tfNodeSelectors.Evaluator) 0 }}
          nodeSelector:
          {{- range $nodeKey,$nodeVal := $tfNodeSelectors.Evaluator }}
            {{ $nodeKey }}: "{{ $nodeVal }}"
          {{- end }}
          {{- end }}
          {{- if ne (len .Values.tolerations) 0 }}
          tolerations:
          {{- range $tolerationKey := .Values.tolerations }}
          - {{- if $tolerationKey.key }}
            key: "{{ $tolerationKey.key }}"
            {{- end }}
            {{- if $tolerationKey.value }}
            value: "{{ $tolerationKey.value }}"
            {{- end }}
            {{- if $tolerationKey.effect }}
            effect: "{{ $tolerationKey.effect }}"
            {{- end }}
            {{- if $tolerationKey.operator }}
            operator: "{{ $tolerationKey.operator }}"
            {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.priorityClassName }}
          priorityClassName: {{ .Values.priorityClassName }}
          {{- end }}
          {{- if .Values.schedulerName }}
          schedulerName: {{ .Values.schedulerName }}
          {{- else if .Values.ps }}
          {{- if .Values.hasGangScheduler }}
          {{- if .Values.enableGangScheduler }}
          schedulerName: {{ .Values.gangSchedulerName }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.useHostNetwork }}
          {{- if not .Values.useENI }}
          hostNetwork: {{ .Values.useHostNetwork }}
          dnsPolicy: ClusterFirstWithHostNet
          {{- end }}
          {{- end }}
          {{- if .Values.useHostPID }}
          hostPID: {{ .Values.useHostPID }}
          {{- end }}
          {{- if .Values.useHostIPC }}
          hostIPC: {{ .Values.useHostIPC }}
          {{- end }}
          {{- if .Values.enablePodSecurityContext }}
          {{- if .Values.isNonRoot}}
          securityContext:
            runAsUser: {{ .Values.podSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.podSecurityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.podSecurityContext.runAsNonRoot }}
            supplementalGroups:
              {{- range $group := .Values.podSecurityContext.supplementalGroups }}
              - {{ $group -}}
              {{ end }}
          {{- end }}
          {{- end }}
          volumes:
            {{- if ne (len .Values.configFiles) 0 }}
            {{- $releaseName := .Release.Name }}
            {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
            - name: {{ $containerPathKey }}
              configMap:
                name: {{ $releaseName }}-{{ $containerPathKey }}
            {{- end }}
            {{- end }}
            {{- if .Values.useTensorboard }}
            {{- if .Values.isLocalLogging }}
            - hostPath:
                path: "{{ .Values.hostLogPath }}"
              name: training-logs-volume
            {{- end}}
            {{- end}}
            {{- if .Values.syncMode }}
            - name: code-sync
              emptyDir: {}
            {{- end}}
            {{- if gt (int $gpuCount) 0}}  
            {{- if .Values.nvidiaPath }}
            - hostPath:
                path: "{{ .Values.nvidiaPath }}"
              name: nvidia
            {{- end }}
            {{- end }}
            {{- if .Values.dataset }}   
            {{- range $pvcName, $destPath := .Values.dataset }}
            - name: "{{ $pvcName }}"
              persistentVolumeClaim:
                claimName: "{{ $pvcName }}"
            {{- end }}
            {{- end }}
            {{- if $dataDirs }}
            {{- range $dataDirs }}
            - hostPath:
                path: {{ .hostPath }}
              name: {{ .name }}
            {{- end }}
            {{- end }}
          {{- if .Values.syncMode }}
          initContainers:
          - name: init-code
            {{- if .Values.syncImage }}
            image: "{{ .Values.syncImage }}"
            {{- else }}
            {{- if eq .Values.syncMode "rsync" }}
            image: "{{ .Values.rsyncImage }}"
            {{- end }}
            {{- if eq .Values.syncMode "git" }}
            image: "{{ .Values.gitImage }}"
            {{- end }}
            {{- end }}
            imagePullPolicy: {{ .Values.imagePullPolicy }}
            {{- if eq "rsync" $syncMode }}
            command: ["rsync", "-avP", "{{ .Values.syncSource}}", "/code"]
            {{- end }}
            resources:
              requests:
                  {{- if .Values.evaluatorCPU }}
                  cpu: {{ .Values.evaluatorCPU | quote }}
                  {{- end}}
                  {{- if .Values.evaluatorMemory }}
                  memory: {{ .Values.evaluatorMemory | quote }}
                  {{- end}}
              limits:
                  {{- if .Values.evaluatorCPULimit }}
                  cpu: {{ .Values.evaluatorCPULimit | quote }}                
                  {{- else if .Values.evaluatorCPU }}
                  cpu: {{ .Values.evaluatorCPU | quote }}
                  {{- end}}
                  {{- if .Values.evaluatorMemoryLimit }}
                  memory: {{ .Values.evaluatorMemoryLimit | quote }}                  
                  {{- else if .Values.evaluatorMemory }}
                  memory: {{ .Values.evaluatorMemory | quote }}
                  {{- end}}
            env:
            {{- range $key, $value := .Values.envs }}
              - name: "{{ $key }}"
                value: "{{ $value }}"
            {{- end }}
            {{- if eq "git" $syncMode }}
              - name: GIT_SYNC_REPO
                value: {{ .Values.syncSource}}
              - name: GIT_SYNC_DEST
                value: {{ .Values.syncGitProjectName}}
              - name: GIT_SYNC_ROOT
                value: /code
              - name: GIT_SYNC_ONE_TIME
                value: "true"
            {{- end }}
            volumeMounts:
              - name: code-sync
                mountPath: /code
          {{- end}}
          {{- if ne (len .Values.imagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $imagePullSecret := .Values.imagePullSecrets }}
            - name: "{{ $imagePullSecret }}"
          {{- end }}
          {{- end }}
          containers:
            - name: tensorflow
              image: {{ .Values.workerImage }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              {{- if .Values.workingDir }}
              workingDir: {{ .Values.workingDir }}
              {{- end }}
              {{- if .Values.privileged }}
              securityContext:
                privileged: true
              {{- end }}
              resources:             
                requests:
                  {{- if gt (int $gpuCount) 0}}   
                  {{- if .Values.nvidiaPath }}
                  alpha.kubernetes.io/nvidia-gpu: {{ $gpuCount | quote }}
                  {{- else}}
                  nvidia.com/gpu: {{ $gpuCount | quote }}
                  {{- end}}
                  {{- end}}
                  {{- if .Values.evaluatorCPU }}
                  cpu: {{ .Values.evaluatorCPU | quote }}
                  {{- end}}
                  {{- if .Values.evaluatorMemory }}
                  memory: {{ .Values.evaluatorMemory | quote }}
                  {{- end}}
                limits:
                  {{- if gt (int $gpuCount) 0}}   
                  {{- if .Values.nvidiaPath }}
                  alpha.kubernetes.io/nvidia-gpu: {{ $gpuCount | quote }}
                  {{- else}}
                  nvidia.com/gpu: {{ $gpuCount | quote }}
                  {{- end}}
                  {{- end}}
                  {{- if .Values.evaluatorCPULimit }}
                  cpu: {{ .Values.evaluatorCPULimit | quote }}                  
                  {{- else if .Values.evaluatorCPU }}
                  cpu: {{ .Values.evaluatorCPU | quote }}
                  {{- end}}
                  {{- if .Values.evaluatorMemoryLimit }}
                  memory: {{ .Values.evaluatorMemoryLimit | quote }}                  
                  {{- else if .Values.evaluatorMemory }}
                  memory: {{ .Values.evaluatorMemory | quote }}
                  {{- end}}
              command:
                - "{{ .Values.shell }}"
                - "-c"
                - {{ .Values.command }}
              env:        
              {{- range $key, $value := .Values.envs }}
                - name: "{{ $key }}"
                  value: "{{ $value }}"
              {{- end }}
              volumeMounts:
                {{- if ne (len .Values.configFiles) 0 }}
                {{- $releaseName := .Release.Name }}
                {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
                {{- $visit := "false" }}
                {{- range $cofigFileKey,$configFileInfo := $configFileInfos }}
                {{- if eq  "false" $visit }}
                - mountPath: {{ $configFileInfo.containerFilePath }}
                  name: {{ $containerPathKey }}
                {{- $visit = "true" }}  
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
                {{- if .Values.syncMode }}
                {{- if .Values.workingDir }}
                - name: code-sync
                  mountPath: {{ .Values.workingDir }}/code
                {{- else }}
                - name: code-sync
                  mountPath: /code
                {{- end}}
                {{- end}}
                {{- if .Values.dataset }}   
                {{- range $pvcName, $destPath := .Values.dataset }}
                - name: "{{ $pvcName }}"
                  mountPath: "{{ $destPath }}"
                {{- end }}
                {{- end }}
                {{- if gt (int $gpuCount) 0}}  
                {{- if .Values.nvidiaPath }}
                - mountPath: /usr/local/nvidia
                  name: nvidia
                {{- end }}
                {{- end }}
                {{- if $dataDirs }}
                {{- range $dataDirs }}
                - mountPath: {{ .containerPath }}
                  name: {{ .name }}
                {{- end }}
                {{- end }}
{{- end }}
