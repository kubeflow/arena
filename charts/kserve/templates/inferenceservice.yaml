{{- $gpuCount := .Values.gpuCount -}}
{{- $gpuMemory := .Values.gpuMemory -}}
{{- $gpuCore := .Values.gpuCore -}}
apiVersion: serving.kserve.io/v1beta1
kind: InferenceService
metadata:
  annotations:
  {{- range $key, $value := .Values.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- if eq (include "kserve.isCustomMetrics" .) "true" }}
    serving.kserve.io/autoscalerClass: external
  {{- end }}
  {{- if .Values.enablePrometheus }}
    serving.kserve.io/enable-prometheus-scraping: "true"
  {{- end }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: {{ template "kserve.chart" . }}
    app: {{ template "kserve.name" . }}
    servingType: "kserve"
    servingName: "{{ .Values.servingName }}"
  {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  name: {{ .Release.Name }}
spec:
  predictor:
    {{- if eq (include "kserve.isCustomMetrics" .) "false" }}
    {{- if .Values.minReplicas }}
    minReplicas: {{ .Values.minReplicas }}
    {{- end }}
    {{- if .Values.maxReplicas }}
    maxReplicas: {{ .Values.maxReplicas }}
    {{- end }}
    {{- if .Values.scaleTarget }}
    scaleTarget: {{ .Values.scaleTarget }}
    {{- end }}
    {{- if .Values.scaleMetric }}
    scaleMetric: {{ .Values.scaleMetric }}
    {{- end }}
    {{- end}}
    {{- if .Values.containerConcurrency }}
    containerConcurrency: {{ .Values.containerConcurrency }}
    {{- end }}
    {{- if .Values.timeout }}
    timeout: {{ .Values.timeout }}
    {{- end }}
    {{- if ge (int .Values.canaryTrafficPercent) 0 }}
    canaryTrafficPercent: {{ (int .Values.canaryTrafficPercent) }}
    {{- end }}
    {{- if .Values.securityContext }}
    securityContext:
    {{- range $key, $value := .Values.securityContext }}
      {{ $key }}: {{ $value }}
    {{- end }}
    {{- end }}
    {{- if .Values.modelFormat }}
    model:
      modelFormat:
        {{- if .Values.modelFormat.name }}
        name: {{ .Values.modelFormat.name }}
        {{- end }}
        {{- if .Values.modelFormat.version }}
        version: {{ .Values.modelFormat.version | quote }}
        {{- end }}
      {{- if .Values.runtime }}
      runtime: {{ .Values.runtime }}
      {{- end }}
      {{- if .Values.storageUri }}
      storageUri: {{ .Values.storageUri }}
      {{- end }}
      {{- if .Values.runtimeVersion }}
      runtimeVersion: {{ .Values.runtimeVersion }}
      {{- end }}
      {{- if .Values.protocolVersion }}
      protocolVersion: {{ .Values.protocolVersion }}
      {{- end }}
      {{- if .Values.image }}
      image: "{{ .Values.image }}"
      {{- end }}
      {{- if .Values.imagePullPolicy }}
      imagePullPolicy: "{{ .Values.imagePullPolicy }}"
      {{- end }}
      {{- if or .Values.envs .Values.envsFromSecret }}
      env:
      {{- range $key, $value := .Values.envs }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
      {{- end }}
      {{- range $envName, $secretName := .Values.envsFromSecret }}
        - name: "{{ $envName }}"
          valueFrom:
            secretKeyRef:
              key: "{{ $envName }}"
              name: "{{ $secretName }}"
      {{- end }}
      {{- end }}
      {{- if ne .Values.command "" }}
      command:
      - "{{ .Values.shell }}"
      - "-c"
      - {{ .Values.command }}
      {{- end }}
      ports:
        {{- if ne (int .Values.port) 0 }}
        - containerPort: {{ .Values.port }}
          protocol: TCP
        {{- end }}
      resources:
        limits:
          {{- if .Values.cpu }}
          cpu: {{ .Values.cpu }}
          {{- end }}
          {{- if .Values.memory }}
          memory: {{ .Values.memory }}
          {{- end }}
          {{- if gt (int $gpuCount) 0}}
          nvidia.com/gpu: {{ .Values.gpuCount }}
          {{- end }}
          {{- if gt (int $gpuMemory) 0}}
          aliyun.com/gpu-mem: {{ .Values.gpuMemory }}
          {{- end }}
          {{- if gt (int $gpuCore) 0 }}
          aliyun.com/gpu-core.percentage: {{ .Values.gpuCore }}
          {{- end }}
        requests:
          {{- if .Values.cpu }}
          cpu: {{ .Values.cpu }}
          {{- end }}
          {{- if .Values.memory }}
          memory: {{ .Values.memory }}
          {{- end }}
          {{- if gt (int $gpuCount) 0}}
          nvidia.com/gpu: {{ .Values.gpuCount }}
          {{- end }}
          {{- if gt (int $gpuMemory) 0}}
          aliyun.com/gpu-mem: {{ .Values.gpuMemory }}
          {{- end }}
          {{- if gt (int $gpuCore) 0 }}
          aliyun.com/gpu-core.percentage: {{ .Values.gpuCore }}
          {{- end }}
      volumeMounts:
        {{- if .Values.shareMemory }}
        - mountPath: /dev/shm
          name: dshm
        {{- end }}
        {{- if .Values.modelDirs }}
        {{- range $pvcName, $destPath := .Values.modelDirs}}
        - name: "{{ $pvcName }}"
          mountPath: "{{ $destPath }}"
        {{- end }}
        {{- end }}
        {{- if .Values.tempDirs }}
        {{- range $name, $destPath := .Values.tempDirs}}
        - name: "{{ $name }}"
          mountPath: "{{ $destPath }}"
        {{- end }}
        {{- end }}
        {{- if ne (len .Values.configFiles) 0 }}
        {{- $releaseName := .Release.Name }}
        {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
        {{- $visit := "false" }}
        {{- range $cofigFileKey,$configFileInfo := $configFileInfos }}
        {{- if eq  "false" $visit }}
        - name: {{ $containerPathKey }}
          mountPath: {{ $configFileInfo.containerFilePath }}
        {{- $visit = "true" }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
    {{- else }}
    containers:
      - name: kserve-container
        {{- if .Values.image }}
        image: "{{ .Values.image }}"
        {{- end }}
        {{- if .Values.imagePullPolicy }}
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        {{- end }}
        {{- if or .Values.envs .Values.envsFromSecret }}
        env:
        {{- range $key, $value := .Values.envs }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
        {{- end }}
        {{- range $envName, $secretName := .Values.envsFromSecret }}
          - name: "{{ $envName }}"
            valueFrom:
              secretKeyRef:
                key: "{{ $envName }}"
                name: "{{ $secretName }}"
        {{- end }}
        {{- end }}
        {{- if ne .Values.command "" }}
        command:
        - "{{ .Values.shell }}"
        - "-c"
        - {{ .Values.command }}
        {{- end }}
        ports:
          {{- if ne (int .Values.port) 0 }}
          - containerPort: {{ .Values.port }}
            protocol: TCP
          {{- end }}
        resources:
          requests:
            {{- if .Values.cpu }}
            cpu: {{ .Values.cpu }}
            {{- end }}
            {{- if .Values.memory }}
            memory: {{ .Values.memory }}
            {{- end }}
            {{- if gt (int $gpuCount) 0}}
            nvidia.com/gpu: {{ .Values.gpuCount }}
            {{- end }}
            {{- if gt (int $gpuMemory) 0}}
            aliyun.com/gpu-mem: {{ .Values.gpuMemory }}
            {{- end }}
            {{- if gt (int $gpuCore) 0 }}
            aliyun.com/gpu-core.percentage: {{ .Values.gpuCore }}
            {{- end }}
          limits:
            {{- if .Values.cpu }}
            cpu: {{ .Values.cpu }}
            {{- end }}
            {{- if .Values.memory }}
            memory: {{ .Values.memory }}
            {{- end }}
            {{- if gt (int $gpuCount) 0}}
            nvidia.com/gpu: {{ .Values.gpuCount }}
            {{- end }}
            {{- if gt (int $gpuMemory) 0}}
            aliyun.com/gpu-mem: {{ .Values.gpuMemory }}
            {{- end }}
            {{- if gt (int $gpuCore) 0 }}
            aliyun.com/gpu-core.percentage: {{ .Values.gpuCore }}
            {{- end }}
        volumeMounts:
          {{- if .Values.shareMemory }}
          - mountPath: /dev/shm
            name: dshm
          {{- end }}
          {{- if .Values.modelDirs }}
          {{- range $pvcName, $destPath := .Values.modelDirs}}
          - name: "{{ $pvcName }}"
            mountPath: "{{ $destPath }}"
          {{- end }}
          {{- end }}
          {{- if .Values.tempDirs }}
          {{- range $name, $destPath := .Values.tempDirs}}
          - name: "{{ $name }}"
            mountPath: "{{ $destPath }}"
          {{- end }}
          {{- end }}
          {{- if ne (len .Values.configFiles) 0 }}
          {{- $releaseName := .Release.Name }}
          {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
          {{- $visit := "false" }}
          {{- range $cofigFileKey,$configFileInfo := $configFileInfos }}
          {{- if eq  "false" $visit }}
          - name: {{ $containerPathKey }}
            mountPath: {{ $configFileInfo.containerFilePath }}
          {{- $visit = "true" }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- end }}
    {{- end }}
    {{- if ne (len .Values.nodeSelectors) 0 }}
    nodeSelector:
    {{- range $nodeKey,$nodeVal := .Values.nodeSelectors }}
      {{ $nodeKey }}: "{{ $nodeVal }}"
    {{- end }}
    {{- end }}
    {{- if .Values.schedulerName }}
    schedulerName: {{ .Values.schedulerName }}
    {{- end }}
    {{- if ne (len .Values.tolerations) 0 }}
    tolerations:
    {{- range $tolerationKey := .Values.tolerations }}
    - {{- if $tolerationKey.key }}
      key: "{{ $tolerationKey.key }}"
      {{- end }}
      {{- if $tolerationKey.value }}
      value: "{{ $tolerationKey.value }}"
      {{- end }}
      {{- if $tolerationKey.effect }}
      effect: "{{ $tolerationKey.effect }}"
      {{- end }}
      {{- if $tolerationKey.operator }}
      operator: "{{ $tolerationKey.operator }}"
      {{- end }}
    {{- end }}
    {{- end }}
    {{- if ne (len .Values.imagePullSecrets) 0 }}
    imagePullSecrets:
    {{- range $imagePullSecret := .Values.imagePullSecrets }}
      - name: "{{ $imagePullSecret }}"
    {{- end }}
    {{- end }}
    volumes:
      {{- if .Values.shareMemory }}
      - name: dshm
        emptyDir:
          medium: Memory
          sizeLimit: {{ .Values.shareMemory }}
      {{- end }}
      {{- if .Values.modelDirs }}
      {{- range $pvcName, $destPath := .Values.modelDirs}}
      - name: "{{ $pvcName }}"
        persistentVolumeClaim:
          claimName: "{{ $pvcName }}"
      {{- end }}
      {{- end }}
      {{- if .Values.tempDirs }}
      {{- range $name, $destPath := .Values.tempDirs}}
      - name: "{{ $name }}"
        emptyDir: {}
      {{- end }}
      {{- end }}
      {{- if ne (len .Values.configFiles) 0 }}
      {{- $releaseName := .Release.Name }}
      {{- range $containerPathKey,$configFileInfos := .Values.configFiles }}
      - name: {{ $containerPathKey }}
        configMap:
          name: {{ $releaseName }}-{{ $containerPathKey }}
      {{- end }}
      {{- end }}
---
{{- if eq (include "kserve.isCustomMetrics" .) "true" }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name:  {{ .Release.Name }}-predictor
  {{- if .Values.minReplicas }}
  minReplicas: {{ .Values.minReplicas }}
  {{- end }}
  {{- if .Values.maxReplicas }}
  maxReplicas: {{ .Values.maxReplicas }}
  {{- end }}
  metrics:
    - type: Pods
      pods:
        metric:
          {{- if .Values.scaleMetric }}
          name: {{ .Values.scaleMetric }}
          {{- end }}
        target:
          type: Utilization
          {{- if .Values.scaleTarget }}
          averageValue: {{ .Values.scaleTarget }}
          {{- end}}
{{- end }}
---
{{- if .Values.enablePrometheus }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-metric-svc
  labels:
    isvc: {{ .Release.Name }}
spec:
  selector:
    serving.kserve.io/inferenceservice: {{ .Release.Name }}
  ports:
    - name: metric
      protocol: TCP
      port: {{ .Values.metricsPort}}
      targetPort: {{ .Values.metricsPort}}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ .Release.Name }}-svcmonitor
  annotations:
    arms.prometheus.io/discovery: 'true'
spec:
  selector:
    matchLabels:
      isvc: {{ .Release.Name }}
  namespaceSelector:
    any: true
  endpoints:
    - port: metric
      path: /metrics
      interval: 15s
{{- end }}
