{{- $releaseName := .Release.Name }}
{{- $namespace := .Release.Namespace }}
{{- $workerNum := .Values.workers -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $releaseName }}-cm
  labels:
    app: {{ template "distributed-serving.name" $ }}
    chart: {{ template "distributed-serving.chart" $ }}
    release: {{ $releaseName }}
    heritage: {{ .Release.Service }}
    createdBy: "DistributedServing"
data:
  {{- range $replica := until (int .Values.replicas) }}
  hostfile-{{ $replica }}: |-
    {{ $releaseName }}.{{ $releaseName }}-{{ $replica }}.{{ $namespace }}
    {{- range $i := until (int $workerNum) }}
    {{ $releaseName }}.{{ $releaseName }}-{{ $replica }}-{{ $i }}.{{ $namespace }}
    {{- end }}
  {{- end }}
  master.rayInit: |-
    #!/bin/bash

    ray_port=6379
    ray_init_timeout=300
    ray_cluster_size=$WORLD_SIZE
    master_command=$1

    ray start --head --port=$ray_port

    for (( i=0; i < $ray_init_timeout; i+=5 )); do
      active_nodes=`python3 -c 'import ray; ray.init(); print(sum(node["Alive"] for node in ray.nodes()))'`
      if [ $active_nodes -eq $ray_cluster_size ]; then
        echo "All ray workers are active and the ray cluster is initialized successfully."
        $master_command
        exit 0
      fi
      echo "Wait for all ray workers to be active. $active_nodes/$ray_cluster_size is active"
      sleep 5s;
    done
    echo "Waiting for all ray workers to be active timed out."
    exit 1
  worker.rayInit: |-
    #!/bin/bash

    ray_port=6379
    ray_init_timeout=300
    ray_address=$MASTER_ADDR
    worker_command=$1

    for (( i=0; i < $ray_init_timeout; i+=5 )); do
      ray start --address=$ray_address:$ray_port
      if [ $? -eq 0 ]; then
        echo "Worker: Ray runtime started with head address $ray_address:$ray_port"
        $worker_command
        exit 0
      fi
      echo "Waiting until the ray worker is active..."
      sleep 5s;
    done
    echo "Ray worker starts timeout, head address: $ray_address:$ray_port"
    exit 1